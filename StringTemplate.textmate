{	scopeName = 'source.StringTemplate';
	fileTypes = ( 'stg', 'sti', 'st' );
	foldingStartMarker = '(\[|<<|\$if(.*)\$)\s*$';
	foldingStopMarker = '(\]|>>|\$endif\$)';
	patterns = (
		{	include = '#class'; },
		{	include = '#template'; },
		{	include = '#map'; },
		{	name = 'comment.line.double-slash.StringTemplate';
			match = '//.*\n';
		},
		{	name = 'comment.block.empty.StringTemplate';
			match = '/\*\*/';
			captures = { 0 = { name = 'punctuation.definition.comment.java'; }; };
		},
		{	name = 'comment.block';
			begin = '(/\*|\$!)';
			end = '(\*/|!\$)';
			captures = { 0 = { name = 'punctuation.definition.comment.java'; }; };
		},
		{	match = '\s*((//).*$\n?)';
			captures = {
				1 = { name = 'comment.line.double-slash.java'; };
				2 = { name = 'punctuation.definition.comment.java'; };
			};
		},
		{	include = '#string'; },
		{	include = '#template'; },
	);
	repository = {
		anonymous_template = { };
		class = {
			name = 'meta.class.StringTemplate';
			begin = '\b(?=group|interface)\b';
			end = ';';
			endCaptures = { 0 = { name = 'punctuation.section.class.end.StringTemplate'; }; };
			patterns = (
				{	include = '#class_name'; },
				{	include = '#parent_class'; },
				{	include = '#interfaces'; },
			);
		};
		class_name = {
			match = '(group|interface)\s+(\w+)';
			captures = {
				1 = { name = 'storage.type.class.StringTemplate'; };
				2 = { name = 'entity.name.type.class.StringTemplate'; };
			};
		};
		template = {
		    name = 'meta.function.StringTemplate';
		    begin = '\b(\w+)\s*(\())(\))<<';
		    end = '>>';
		    
            // match = '(\w+)\s*\(((\w+)?(\s*(,)\s*(\w+))*)\)\s*::=';
            //          captures = {
            //              1 = { name = 'entity.name.function.StringTemplate'; };
            //              2 = { name = 'variable.parameter.StringTemplate'; };
            //          };
		};
		group = {
			match = '\s*(\w+)\s*(:\s*(\w+))?';
			captures = {
				1 = { name = 'entity.name.type.class.StringTemplate'; };
				2 = { name = 'punctuation.separator'; };
				3 = { name = 'entity.other.inherited-class.StringTemplate'; };
			};
		};
		interfaces = {
			match = '(implements)\s+(\w+)\s*(,\s*(\w+))*';
			captures = {
				1 = { name = 'keyword.control.StringTemplate'; };
				2 = { name = 'entity.other.type.interface.StringTemplate'; };
				4 = { name = 'entity.other.type.interface.StringTemplate'; };
			};
		};
		map = {
			name = 'meta.structure.dictionary.StringTemplate';
			begin = '(\w+)\s*(::=)\s*(\[)';
			end = '\]';
			beginCaptures = { 
                // 1 = { name = 'entity.name.type.variable.StringTemplate';};
                1 = { name = 'support.function.StringTemplate';};
			    2 = { name = 'punctuation.definition.array.begin.StringTemplate'; }; 
			    3 = { name = 'punctuation.definition.array.begin.StringTemplate'; }; 
			};
			endCaptures = { 0 = { name = 'punctuation.definition.array.end.StringTemplate'; }; };
			patterns = (
				{	name = 'keyword.control.StringTemplate';
					match = '\b(default|key)\b';
				},
				{	include = '#string'; },
				{   name = 'invalid.map.unquoted.StringTemplate';
				    match = '\b[^"].*[^"]\b';
				    disabled = 1;
				}
			);
		};
		
		keywords = {
		    patterns = (
		        { 
		            name = 'keyword.reserved.StringTemplate';
                    match = '\b(default|first|group|if|implements|interface|last|length|optionalrest|strip|super|trunc|else|endif|elseif)\b';
	            }
	        );
        };
		
		parent_class = {
			match = '(:)\s*(\w+)';
			captures = {
				1 = { name = 'punctuation.separator'; };
				2 = { name = 'entity.other.inherited-class.StringTemplate'; };
			};
		};
		string = {
			name = 'string.quoted.double.untitled';
			begin = '(")';
			end = '(")';
			patterns = (
				{	name = 'constant.character.escape.untitled';
					match = '\\.';
				},
			);
		};
		template = {
			name = 'storage.other.StringTemplate';
			begin = '[$]';
			end = '[$]';
			patterns = (
				{	name = 'variable.other.StringTemplate';
					match = '(\w+)((.)\(?(\w+)\)?)*';
					captures = { 3 = { name = 'puntuation.separator.StringTemplate'; }; };
				},
				{	name = 'entity.name.tag.StringTemplate';
					match = '(;)\s*(\w+)\s*=\s*"(.*)"';
					captures = {
						1 = { name = 'punctuation.terminator.StringTemplate'; };
						2 = { name = 'variable.parameter.StringTemplate'; };
						3 = { name = 'string.quoted.double.StringTemplate'; };
					};
				},
				{	name = 'constant.character.escape.untitled';
					match = '{.*}';
				},
			);
		};
	};
}