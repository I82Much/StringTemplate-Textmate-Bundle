{	scopeName = 'source.StringTemplate';
	fileTypes = ( 'stg', 'sti', 'st' );
	foldingStartMarker = '(\[|<<|\$if(.*)\$)\s*$';
	foldingStopMarker = '(\]|>>|\$endif\$)';
	patterns = (
		{	include = '#class'; },
		{	include = '#map'; },
		{	include = '#methods'; },
		{	name = 'comment.line.double-slash.StringTemplate';
			match = '//.*\n';
		},
		{	name = 'comment.block.empty.StringTemplate';
			match = '/\*\*/';
			captures = { 0 = { name = 'punctuation.definition.comment.StringTemplate'; }; };
		},
		{	name = 'comment.block';
			begin = '(/\*|\$!)';
			end = '(\*/|!\$)';
			captures = { 0 = { name = 'punctuation.definition.comment.StringTemplate'; }; };
		},
		{	match = '\s*((//).*$\n?)';
			captures = {
				1 = { name = 'comment.line.double-slash.java'; };
				2 = { name = 'punctuation.definition.comment.java'; };
			};
		},
		{	include = '#string'; },
		{	include = '#template'; },
	);
	repository = {
		anonymous_template = {
			name = 'storage.anonymous_template.StringTemplate';
			begin = '{';
			end = '}';
			beginCaptures = { 0 = { name = 'punctuation.section.anonymous_template.begin.StringTemplate'; }; };
			endCaptures = { 0 = { name = 'punctuation.section.anonymous_template.end.StringTemplate'; }; };
			patterns = ( { include = '#'; } );
		};
		class = {
			name = 'meta.class.StringTemplate';
			begin = '\b(?=group|interface)\b';
			end = ';';
			endCaptures = { 0 = { name = 'punctuation.section.class.end.StringTemplate'; }; };
			patterns = (
				{	include = '#class_name'; },
				{	include = '#parent_class'; },
				{	include = '#interfaces'; },
			);
		};
		class_name = {
			match = '(group|interface)\s+(\w+)';
			captures = {
				1 = { name = 'storage.type.class.StringTemplate'; };
				2 = { name = 'entity.name.type.class.StringTemplate'; };
			};
		};
		conditional = {
			patterns = (
				{	include = '#if'; },
				{	include = '#else'; },
			);
		};
		else = {
			name = 'keyword.control.conditional.StringTemplate';
			match = '(else|endif)';
			disabled = 0;
		};
		group = {
			match = '\s*(\w+)\s*(:\s*(\w+))?';
			captures = {
				1 = { name = 'entity.name.type.class.StringTemplate'; };
				2 = { name = 'punctuation.separator'; };
				3 = { name = 'entity.other.inherited-class.StringTemplate'; };
			};
		};
		if = {
			name = 'meta.conditional.StringTemplate';
			begin = '(if|elseif)(\()';
			end = '(\)*)';
			beginCaptures = {
				1 = { name = 'keyword.control.conditional.StringTemplate'; };
				2 = { name = 'punctuation.section.conditional.begin.StringTemplate'; };
			};
			endCaptures = { 0 = { name = 'punctuation.section.conditional.end.StringTemplate'; }; };
		};
		interfaces = {
			match = '(implements)\s+(\w+)\s*(,\s*(\w+))*';
			captures = {
				1 = { name = 'keyword.control.StringTemplate'; };
				2 = { name = 'entity.other.type.interface.StringTemplate'; };
				4 = { name = 'entity.other.type.interface.StringTemplate'; };
			};
		};
		keywords = {
			patterns = (
				{	name = 'keyword.reserved.StringTemplate';
					match = '(default|first|group|if|implements|interface|last|length|optional|rest|strip|super|trunc|else|endif|elseif)';
				},
			);
		};
		map = {
			name = 'meta.structure.dictionary.StringTemplate';
			begin = '(\w+)\s*(::=)\s*(\[)';
			end = '\]';
			beginCaptures = {
				1 = { name = 'support.function.StringTemplate'; };
				2 = { name = 'punctuation.definition.array.begin.StringTemplate'; };
				3 = { name = 'punctuation.definition.array.begin.StringTemplate'; };
			};
			endCaptures = { 0 = { name = 'punctuation.definition.array.end.StringTemplate'; }; };
			patterns = (
				{	name = 'keyword.control.StringTemplate';
					match = '\b(default|key)\b';
				},
				{	include = '#string'; },
				{	name = 'invalid.map.unquoted.StringTemplate';
					match = '\b[^"].*[^"]\b';
					disabled = 1;
				},
			);
		};
		
		
		assignment = {
		    name = 'meta.variable.assignment';
            begin = '(\w+)';
            end = '';
		    
		};
		
		
		lhs = {
		    comment='The left side of an assignment statement';
		    name = 'variable.parameter.StringTemplate';
		    
		};
		rhs = {
            comment='Anything that can be used in as the right hand side of an assignment statement';
		    
            patterns = (
                {   include = '#string'; },
                {   include = '#anonymous_template'; },
            );
		    
		};
		
		
		methods = {
			name = 'meta.method.StringTemplate';
			begin = '(?=\w.*\s+)(?=[^=]+\()';
			end = '(\>\>)';
			patterns = (
				{	name = 'meta.method.identifier.StringTemplate';
					begin = '(\w+)\s*\(';
					end = '\)';
					beginCaptures = { 1 = { name = 'entity.name.function.StringTemplate'; }; };
					patterns = ( { include = '#parameters'; } );
				},
				{	name = 'meta.method.body.StringTemplate';
				    comment = 'We need to use positive lookahead with the end token so that it is not consumed; if it''s consumed then the meta.method.StringTemplate piece will not find a matching >> to close it.';
					begin = '(::=\<\<)';
					end = '(?=\>\>)';
					beginCaptures = { 0 = { name = 'punctuation.section.function.begin.StringTemplate'; }; };
					endCaptures = { 0 = { name = 'punctuation.section.function.end.StringTemplate'; }; };
					patterns = (
						{	name = 'comment.block.StringTemplate';
							begin = '(\$!)';
							end = '(!\$)';
							captures = { 0 = { name = 'punctuation.definition.comment.StringTemplate'; }; };
						},
						{	include = '#stringtemplate'; },
					);
				},
			);
		};
		named_args = {
			begin = '\b(\w+)\s*(=)(?!=)';
			end = '\s*(?=(,)|(\)))';
			beginCaptures = {
				1 = { name = 'variable.parameter.function.StringTemplate'; };
				2 = { name = 'keyword.operator.assignment.StringTemplate'; };
				3 = { name = 'variable.parameter'; };
			};
			endCaptures = { 1 = { name = 'punctuation.separator.parameters.StringTemplate'; }; };
			patterns = (
				{	include = '#anonymous_template'; },
				{	include = '$self'; },
			);
		};
		parameters = {
			contentName = 'meta.function.parameters.StringTemplate';
			patterns = (
				{	include = '#named_args'; },
				{	name = 'variable.parameter.StringTemplate';
					match = '\w+';
				},
			);
		};
		parent_class = {
			match = '(:)\s*(\w+)';
			captures = {
				1 = { name = 'punctuation.separator'; };
				2 = { name = 'entity.other.inherited-class.StringTemplate'; };
			};
		};
		string = {
			name = 'string.quoted.double.StringTemplate';
			begin = '(")';
			end = '(")';
			patterns = (
				{	name = 'constant.character.escape.untitled';
					match = '\\.';
				},
				{	include = '#template'; },
			);
		};
		stringtemplate = {
			patterns = (
				{	include = '#template'; },
				{	include = '#string'; },
			);
		};
		template = {
			name = 'storage.other.StringTemplate';
			begin = '[$]';
			end = '[$]';
			beginCaptures = { 0 = { name = 'support.punctuation.section.template.begin.StringTemplate'; }; };
			endCaptures = { 0 = { name = 'support.punctuation.section.template.end.StringTemplate'; }; };
			patterns = (
			    {
				    name = 'punctuation.terminator.StringTemplate';
				    match = '(;)';
				},
			    
				{	include = '#keywords'; },
				{	include = '#conditional'; },
				{	include = '#variable_access'; },
				{	include = '#template_call'; },
				{	include = '#anonymous_template'; },
				
				
				{   include = '#named_args'; },
				
				
				{	name = 'entity.name.tag.StringTemplate';
					match = '(;)\s*(\w+)\s*=\s*["{](.*)["}]';
					captures = {
						1 = { name = 'punctuation.terminator.StringTemplate'; };
						2 = { name = 'variable.parameter.StringTemplate'; };
						3 = { name = 'string.quoted.double.StringTemplate'; };
					};
				},
				{	name = 'constant.character.escape.untitled';
					match = '{.*}';
				},
			);
		};
		template_call = {
			name = 'meta.method.identifier.StringTemplate';
			match = '\w+';
		};
		variable_access = {
			name = 'variable.other.StringTemplate';
			match = '(\w+)(([.])\(?(\w+)\)?)*';
			captures = { 3 = { name = 'punctuation.separator.StringTemplate'; }; };
		};
	};
}